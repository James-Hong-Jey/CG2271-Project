#include "MKL25Z4.h"

#define RED_LED 18 //PortB Pin 18
#define GREEN_LED 19 //PortB Pin 19
#define BLUE_LED 1 //PortD Pin 1
#define MASK(x) (1 << (x))

#define BAUD_RATE 9600
#define UART_TX_PORTE22 22
#define UART_RX_PORTE23 23
#define UART2_INT_PRIO 128

#define Q_SIZE 32

#define FORWARD 1
#define BACKWARDS 0
#define LEFT 2
#define RIGHT 3

#define LEFT_FORWARD 0 // PTB0 TPM1_CH0 (M1 & M3)
#define LEFT_BACK 1 // PTB1 TPM1_CH1 (M1 & M3)
#define RIGHT_FORWARD 2 // PTB2 TPM2_CH0 (M2 & M4)
#define RIGHT_BACK 3 //PTB3 TPM2_CH1 (M2 & M4)
#define DUTY_CYCLE 0x1D4C // 7500 (50hz)

typedef enum {
  led_on,
  led_off
} led_status_t;

typedef struct { 
  unsigned char DATA[Q_SIZE];
  // Done halfway; copy the rest from lect 8 page 18
  unsigned int HEAD;
  unsigned int TAIL;
  unsigned int SIZE;
} Q_T;

Q_T tx_q, rx_q;
volatile uint8_t rx_IRQ_data = 0x00;
// volatile uint32_t rx_IRQ_data = 0;

void Q_Init(Q_T *q) {
  unsigned int i;
  for(i=0; i < Q_SIZE; i++) q->DATA[i] = 0; // Initialise to 0
  q->HEAD = 0;
  q->TAIL = 0;
  q->SIZE = 0;
}

int Q_Empty(Q_T *q) {
  return q->SIZE == 0;
}

int Q_Full(Q_T *q) {
  return q->SIZE == Q_SIZE;
}

int Q_Enqueue(Q_T *q, unsigned char d) {
  if(Q_Full(q)) return 0; // Queue full - Failure
  q->DATA[q->TAIL++] = d;
  q->TAIL %= Q_SIZE; // This makes the list circular
  q->SIZE++;
  return 1; // Success
}

unsigned char Q_Dequeue(Q_T *q) {
  if(Q_Empty(q)) return 0; // Nothing to dequeue
  unsigned char t = q->DATA[q->HEAD];
  q->DATA[q->HEAD++] = 0;
  q->HEAD %= Q_SIZE;
  q->SIZE--;
  return t;
}

void UART2_IRQHandler(void) {
  NVIC_ClearPendingIRQ(UART2_IRQn);

  // Transmitter ready
  if(UART2->S1 & UART_S1_TDRE_MASK) {
    if(Q_Empty(&tx_q)) {
            // Queue Empty so disable interrupts
            UART2->C2 &= ~UART_C2_TIE_MASK; 
        } else {
            UART2->D = Q_Dequeue(&tx_q);
        }
  }

  // If receiver is full
  if(UART2->S1 & UART_S1_RDRF_MASK) {
        if(Q_Full(&rx_q)) {
            while(1); // TODO: Handle error
        } else {
            rx_IRQ_data = UART2->D;
        }
  }

  // Error checking
  if(UART2->S1 & (UART_S1_OR_MASK | 
                    UART_S1_NF_MASK | 
                    UART_S1_FE_MASK | 
                    UART_S1_PF_MASK)) {
    // TODO: Handle error
    // TODO: Clear Flag
    return;
  }
}

static void delay(volatile uint32_t nof) {
    while(nof != 0) {
        __asm("NOP");
        nof--;
    }
}

void initLED(void) {
  //Enable CLock to PORTB and PORTD
  SIM->SCGC5 |= ((SIM_SCGC5_PORTB_MASK) | (SIM_SCGC5_PORTD_MASK));
  
  //Configure MUX settings 
  PORTB->PCR[RED_LED] &= ~PORT_PCR_MUX_MASK; //clear bit 10 to 8
  PORTB->PCR[RED_LED] |= PORT_PCR_MUX(1); //Select GPIO, from datasheet it is alternative 1, bits 10-8 are 001 so we use 1
  
  PORTB->PCR[GREEN_LED] &= ~PORT_PCR_MUX_MASK; //clear bit 10 to 8
  PORTB->PCR[GREEN_LED] |= PORT_PCR_MUX(1); //Select GPIO, from datasheet it is alternative 1, bits 10-8 are 001 so we use 1
  
  PORTD->PCR[BLUE_LED] &= ~PORT_PCR_MUX_MASK; //clear bit 10 to 8
  PORTD->PCR[BLUE_LED] |= PORT_PCR_MUX(1); //Select GPIO, from datasheet it is alternative 1, bits 10-8 are 001 so we use 1
  
  //Set Data Direction Registers for PortB and PortD
  PTB->PDDR |= (MASK(RED_LED) | MASK(GREEN_LED));
  PTD->PDDR |= MASK(BLUE_LED);
}

void offAllLed(void) { //off all LED
  PTB->PSOR = MASK(RED_LED);
  PTB->PSOR = MASK(GREEN_LED);
  PTD->PSOR = MASK(BLUE_LED);
}

void initUART2(uint32_t baud_rate) {

    uint32_t divisor, bus_clock;
  
    SIM->SCGC4 |= SIM_SCGC4_UART2_MASK; //enable clock to UART2 module
    SIM->SCGC5 |= SIM_SCGC5_PORTE_MASK; //enable clock to PORT E module

    PORTE->PCR[UART_TX_PORTE22] &= ~PORT_PCR_MUX_MASK; //clear PORTE_PCR22
    PORTE->PCR[UART_TX_PORTE22] |= PORT_PCR_MUX(4); //enable pin mux alternative 4, page 163, which enables UART2_TX

    PORTE->PCR[UART_RX_PORTE23] &= ~PORT_PCR_MUX_MASK; //clear PORTE_PCR23
    PORTE->PCR[UART_RX_PORTE23] |= PORT_PCR_MUX(4); //enable UART2_RX

    UART2->C2 &= ~((UART_C2_TE_MASK) | (UART_C2_RE_MASK)); //disable tx and rx before configuration
bus_clock = (DEFAULT_SYSTEM_CLOCK) / 2;
    divisor = bus_clock / (baud_rate * 16); //oversampling of UART 2, 16*baud rate is most commonly used, each serial bit sampled 16 times
    UART2->BDH = UART_BDH_SBR(divisor >> 8);
    UART2->BDL = UART_BDL_SBR(divisor);

    // No parity, 8 bits, two stop bits, other settings
    UART2->C1 = 0;
    UART2->S2 = 0;
    UART2->C3 = 0;

    // Queue
    NVIC_SetPriority(UART2_IRQn, 128);
    NVIC_ClearPendingIRQ(UART2_IRQn);
    NVIC_EnableIRQ(UART2_IRQn);

    // // Enable TX and RX Interrupts
    UART2->C2 |= UART_C2_TIE_MASK | UART_C2_RIE_MASK;

    // Initialise both tx_q and rx_q
    Q_Init(&tx_q);
    Q_Init(&rx_q);

    UART2->C2 |= ((UART_C2_TE_MASK) | (UART_C2_RE_MASK)); //Enable TX and RX
}

// /* UART2 Transmit Poll */
// void UART2_Transmit_Poll(uint8_t data) {
//     while(!(UART2->S1 & UART_S1_TDRE_MASK)); // wait until transmit data register is empty
//     UART2->D = data; // put into D register
//     // in transmit mode , waiting for data to be set
// }

// /* UART2 Receive Poll */
// uint8_t UART2_Receive_Poll(void) {
//     while(!(UART2->S1 & UART_S1_RDRF_MASK)); // wait until receive data register is full
//     return (UART2->D);
// }

void initPWM(void) {
    // enable clock gating for PORTB
    SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;

    // configure mode 3 for the PWM pin operation
    // For left motors
    PORTB->PCR[LEFT_FORWARD] &= ~PORT_PCR_MUX_MASK;
    PORTB->PCR[LEFT_FORWARD] |= PORT_PCR_MUX(3);
    PORTB->PCR[LEFT_BACK] &= ~PORT_PCR_MUX_MASK;
    PORTB->PCR[LEFT_BACK] |= PORT_PCR_MUX(3);

    // For right motors
    PORTB->PCR[RIGHT_FORWARD] &= ~PORT_PCR_MUX_MASK;
    PORTB->PCR[RIGHT_FORWARD] |= PORT_PCR_MUX(3);
    PORTB->PCR[RIGHT_BACK] &= ~PORT_PCR_MUX_MASK;
    PORTB->PCR[RIGHT_BACK] |= PORT_PCR_MUX(3);

    // enable clock gating for Timer 1
    SIM->SCGC6 = (SIM_SCGC6_TPM1_MASK) | (SIM_SCGC6_TPM2_MASK);

    // select clock for TPM module
    SIM->SOPT2 &= ~SIM_SOPT2_TPMSRC_MASK;
    SIM->SOPT2 |= SIM_SOPT2_TPMSRC(1); // MCGFLLCLK clock or MCGPLLCLK/2 clock

    // Set Mod value 48000000 / 120 = 375000 / 7500 = 50hz
    TPM1->MOD = 7500;
    TPM2->MOD = 7500;

    // Edged aligned PWM
    // upate snc register: CMOD = 01, PS = 111 (128)
    TPM1->SC &= ~((TPM_SC_CMOD_MASK) | (TPM_SC_PS_MASK));
    TPM1->SC |= (TPM_SC_CMOD(1)) | (TPM_SC_PS(7)); // LPTPM counter increments on every LPTPM counter clock
    TPM1->SC &= ~(TPM_SC_CPWMS_MASK); // up counting mode

    // Same config as TPM1
    TPM2->SC &= ~((TPM_SC_CMOD_MASK) | (TPM_SC_PS_MASK));
    TPM2->SC |= (TPM_SC_CMOD(1)) | (TPM_SC_PS(7)); 
    TPM2->SC &= ~(TPM_SC_CPWMS_MASK);

    // Enable PWM on TPM1 Channel 0 -> PTB0
    TPM1_C0SC &= ~((TPM_CnSC_ELSB_MASK) | (TPM_CnSC_ELSA_MASK) | (TPM_CnSC_MSB_MASK) | (TPM_CnSC_MSA_MASK));
    TPM1_C0SC |= (TPM_CnSC_ELSB(1) | TPM_CnSC_MSB(1));

    // Enable PWM on TPM1 Channel 1 -> PTB1
    TPM1_C1SC &= ~((TPM_CnSC_ELSB_MASK) | (TPM_CnSC_ELSA_MASK) | (TPM_CnSC_MSB_MASK) | (TPM_CnSC_MSA_MASK));
    TPM1_C1SC |= (TPM_CnSC_ELSB(1) | TPM_CnSC_MSB(1));

    // Enable PWM on TPM2 Channel 0 -> PTB3
    TPM2_C0SC &= ~((TPM_CnSC_ELSB_MASK) | (TPM_CnSC_ELSA_MASK) | (TPM_CnSC_MSB_MASK) | (TPM_CnSC_MSA_MASK));
    TPM2_C0SC |= (TPM_CnSC_ELSB(1) | TPM_CnSC_MSB(1));

    // Enable PWM on TPM2 Channel 1 -> PTB4
    TPM2_C1SC &= ~((TPM_CnSC_ELSB_MASK) | (TPM_CnSC_ELSA_MASK) | (TPM_CnSC_MSB_MASK) | (TPM_CnSC_MSA_MASK));
    TPM2_C1SC |= (TPM_CnSC_ELSB(1) | TPM_CnSC_MSB(1));
}

void stopMotor() {
    TPM1->MOD = 0;
    // Captured LPTPM counter value of the input modes
    TPM1_C0V = 0; // Stop Left motors Fw
    TPM1_C1V = 0; // Stop Left motors Back

    TPM2->MOD = 0;
    TPM2_C0V = 0; // Stop Right motors fw
    TPM2_C1V = 0; // Stop Right motors back
}

void rotateRight() {
    TPM1->MOD = 7500;
    TPM1_C0V = 3750; // Left motors forward

    TPM2->MOD = 7500;
    TPM2_C0V = 3750; // Right motors forward
}

void rotateLeft() {
    TPM1->MOD = 7500;
    TPM1_C1V = 3750; // Left motors reverse

    TPM2->MOD = 7500;
    TPM2_C1V = 3750; // Right motors reverse
}



void leftTurn() {
    TPM1->MOD = 7500;
    TPM1_C0V = 0x1964; // Left motors slower

    TPM2->MOD = 7500;
    TPM2_C0V = DUTY_CYCLE; // Right motors faster
}

void rightTurn() {
    TPM1->MOD = 7500;
    TPM1_C0V = DUTY_CYCLE; // Left motors faster

    TPM2->MOD = 7500;
    TPM2_C0V = 1000; // Right motors slower
}

void forwardMotor() {
    TPM1->MOD = 7500;
    TPM1_C1V = DUTY_CYCLE; // Left motors reverse

    TPM2->MOD = 7500;
    TPM2_C0V = DUTY_CYCLE; // Right motors forward
}

void reverseMotor() {
    TPM1->MOD = 7500;
    TPM1_C0V = DUTY_CYCLE; // Left motors forward

    TPM2->MOD = 7500;
    TPM2_C1V = DUTY_CYCLE; // Right motors reverse
}

int main(void) {
  // uint8_t rx_data = 0x01; // Polling feature - placeholder value
  SystemCoreClockUpdate();
  initLED();
  initUART2(BAUD_RATE);
  initPWM();
  offAllLed();
  stopMotor();

  while (1) {
    offAllLed();
    //stopMotor();
    // left and right are both 4 bit numbers from 0 (UP) to 15 (DOWN)
    // 7-8 is the idle position
    uint8_t leftStick = (rx_IRQ_data >> 4);
    uint8_t rightStick = rx_IRQ_data & 0x0F;

    // Direction (FORWARD == 1) 
    uint8_t leftDir = leftStick - 8 > 0 ? FORWARD : BACKWARDS;
    // Magnitude from 0 to 7
    uint8_t leftMag = leftStick - 8 > 0 ? leftStick - 8 : 8 - leftStick;

    // Direction (LEFT == 2) 
    uint8_t rightDir = rightStick - 8 > 0 ? LEFT : RIGHT;
    // Magnitude from 0 to 7
    uint8_t rightMag = rightStick - 8 > 0 ? rightStick - 8 : 8 - rightStick;

        if (rx_IRQ_data == 0x01) {
            forwardMotor(); // R1 full speed
        } else if (rx_IRQ_data == 0x02) { 
            rightTurn(); // L1 full speed
        } else if (rx_IRQ_data == 0x06) {
            forwardMotor(); // triangle
        } else if (rx_IRQ_data == 0x03) {
            reverseMotor(); // cross half speed
        } else if (rx_IRQ_data == 0x04) {
            rotateLeft(); // square
        } else if (rx_IRQ_data == 0x05) {
            rotateRight(); // circle
        } else {
            stopMotor();
        }

    // FOR TESTING
    // if (rx_IRQ_data == 0x31) { // ON Red LED
    //    PTB->PCOR = MASK(RED_LED); // TEST
    // } else if(left > 8) { // LEFT DOWN
    //   PTB->PCOR = MASK(GREEN_LED); // JUST TO TEST
    //  } else if (right < 7) { // RIGHT UP
    //    PTD->PCOR = MASK(BLUE_LED); // JUST TO TEST
    // } else { 
    //   offAllLed();
    // }
  }
}